#include "audioclient.h"

/*
 * Constructeur de la classe AudioClient.
 * G√®re la capture audio depuis le p√©riph√©rique d'entr√©e par d√©faut et son envoi vers un serveur via TCP.
 *
 * Param√®tres :
 *  - ip: Adresse IP du serveur destinataire.
 *  - port: Port d'√©coute du serveur.
 *  - parent: Pointeur vers l'objet parent pour la gestion de la m√©moire (optionnel).
 */
AudioClient::AudioClient(const QString &ip, quint16 port, const QString &iClientName, QObject *parent)
    : QObject(parent), serverIp(ip), serverPort(port), clientName(iClientName)
{

    inputDevice = QMediaDevices::defaultAudioInput();

    format.setSampleRate(48000);
    format.setChannelCount(2);
    format.setSampleFormat(QAudioFormat::Float);

    if (!inputDevice.isFormatSupported(format))
    {
        qWarning() << "Format audio non support√©, utilisation du format pr√©f√©r√©.";
        format = inputDevice.preferredFormat();
    }

    audioSource = new QAudioSource(inputDevice, format);

    tcpSocket = new QTcpSocket(this);

    connect(tcpSocket, &QTcpSocket::connected, this, [&]()
            {
                qDebug() << "‚úÖ Connexion r√©ussie au serveur" << serverIp << ":" << serverPort << "avec le nom" << clientName;
                if (!clientName.isEmpty())
                {
                    qDebug() << "üîå Nom du client envoy√© au serveur:" << clientName;
                    setClientName(clientName, tcpSocket);
               }

                startStreaming(); });

    connect(tcpSocket, &QTcpSocket::errorOccurred, this, [&](QAbstractSocket::SocketError error)
            {
                Q_UNUSED(error);
                qWarning() << "‚ö†Ô∏è Erreur de connexion TCP:" << tcpSocket->errorString(); });

    qDebug() << "üì° Tentative de connexion √†" << serverIp << ":" << serverPort;

    tcpSocket->connectToHost(serverIp, serverPort);
}

/*
 * Destructeur de AudioClient.
 * Arr√™te le streaming audio et lib√®re les ressources associ√©es.
 */
AudioClient::~AudioClient()
{
    stopStreaming();
    delete audioSource;
}

void AudioClient::setClientName(const QString &name, QTcpSocket *socket)
{
    clientName = name;

    if (socket->state() == QAbstractSocket::ConnectedState)
    {
        QByteArray namePacket;
        namePacket.append("CLIENT_NAME:" + clientName.toUtf8());
        socket->write(namePacket);
        qDebug() << "üîå Nom du client envoy√© au serveur:" << clientName;
    }
}

/*
 * D√©marre la capture audio et l'envoi des donn√©es vers le serveur.
 *
 * Ce proc√©d√© consiste √† :
 *  - V√©rifier que la connexion TCP est bien √©tablie.
 *  - D√©marrer la capture audio via QAudioSource.
 *  - Connecter le signal readyRead du p√©riph√©rique d'entr√©e pour lire et transmettre d√®s que des donn√©es sont disponibles.
 */
void AudioClient::startStreaming()
{
    if (tcpSocket->state() == QAbstractSocket::ConnectedState)
    {
        device = audioSource->start();
        const int CHUNK_SIZE = 64;

        QObject::connect(device, &QIODevice::readyRead, [this, CHUNK_SIZE]()
                         {
            sendBuffer.append(device->readAll());
            
          while (sendBuffer.size() >= CHUNK_SIZE) 
            {
                QByteArray packet;
                QDataStream stream(&packet, QIODevice::WriteOnly);
            /*  
            D√©finit l'ordre des octets du flux de donn√©es en tant que "Little Endian", 
            ce qui signifie que les octets les moins significatifs sont stock√©s en premier. 
            Cela est important pour assurer la compatibilit√© lors de l'√©criture et de la lecture des donn√©es audio 
            */
                stream.setByteOrder(QDataStream::LittleEndian);
                QByteArray chunk = sendBuffer.left(CHUNK_SIZE);
                stream << chunk;
                qDebug() << "üé§ Envoi du paquet audio de taille" << chunk.size() << "octets" << "au serveur" << serverIp << ":" << serverPort << "avec le nom" << clientName;
                tcpSocket->write(packet);
                sendBuffer.remove(0, CHUNK_SIZE);
            } });

        tcpSocket->setSocketOption(QAbstractSocket::LowDelayOption, 1);
        qDebug() << "üé§ Streaming audio vers" << serverIp << ":" << serverPort;
    }
}

void AudioClient::stopStreaming()
{
    audioSource->stop();
    tcpSocket->close();
    qDebug() << "‚èπÔ∏è Streaming audio arr√™t√©.";
}
