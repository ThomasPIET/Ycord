#include "audioclient.h"

/*
 * Constructeur de la classe AudioClient.
 * G√®re la capture audio depuis le p√©riph√©rique d'entr√©e par d√©faut et son envoi vers un serveur via TCP.
 *
 * Param√®tres :
 *  - ip: Adresse IP du serveur destinataire.
 *  - port: Port d'√©coute du serveur.
 *  - parent: Pointeur vers l'objet parent pour la gestion de la m√©moire (optionnel).
 */
AudioClient::AudioClient(const QString &ip, quint16 port, QObject *parent)
    : QObject(parent), serverIp(ip), serverPort(port)
{
    inputDevice = QMediaDevices::defaultAudioInput();

    format.setSampleRate(16000);
    format.setChannelCount(1);
    format.setSampleFormat(QAudioFormat::Int16);

    if (!inputDevice.isFormatSupported(format))
    {
        qWarning() << "Format audio non support√©, utilisation du format pr√©f√©r√©.";
        format = inputDevice.preferredFormat();
    }

    audioSource = new QAudioSource(inputDevice, format);

    tcpSocket = new QTcpSocket(this);

    connect(tcpSocket, &QTcpSocket::connected, this, [&]()
            {
                qDebug() << "‚úÖ Connexion r√©ussie au serveur" << serverIp << ":" << serverPort;
                startStreaming(); });

    connect(tcpSocket, &QTcpSocket::errorOccurred, this, [&](QAbstractSocket::SocketError error)
            {
                Q_UNUSED(error);
                qWarning() << "‚ö†Ô∏è Erreur de connexion TCP:" << tcpSocket->errorString(); });

    qDebug() << "üì° Tentative de connexion √†" << serverIp << ":" << serverPort;

    tcpSocket->connectToHost(serverIp, serverPort);
}

/*
 * Destructeur de AudioClient.
 * Arr√™te le streaming audio et lib√®re les ressources associ√©es.
 */
AudioClient::~AudioClient()
{
    stopStreaming();
    delete audioSource;
}

/*
 * D√©marre la capture audio et l'envoi des donn√©es vers le serveur.
 *
 * Ce proc√©d√© consiste √† :
 *  - V√©rifier que la connexion TCP est bien √©tablie.
 *  - D√©marrer la capture audio via QAudioSource.
 *  - Connecter le signal readyRead du p√©riph√©rique d'entr√©e pour lire et transmettre d√®s que des donn√©es sont disponibles.
 */
void AudioClient::startStreaming()
{
    if (tcpSocket->state() == QAbstractSocket::ConnectedState)
    {
        device = audioSource->start();

        const int CHUNK_SIZE = 3200;

        /*
        Connecte le signal readyRead du p√©riph√©rique d'entr√©e √† une lambda.
        Ce signal est √©mis d√®s que de nouvelles donn√©es audio sont disponibles.
        */
        QObject::connect(device, &QIODevice::readyRead, [this, CHUNK_SIZE]()
                         {
            sendBuffer.append(device->readAll());
/*             qDebug() << "üîä Buffer de donn√©es audio accumul√©es:" << sendBuffer.size() << "octets";
 */
            while (sendBuffer.size() >= CHUNK_SIZE)
            {
                QByteArray chunk = sendBuffer.left(CHUNK_SIZE);
/*                 qDebug() << "üîä Envoi d'un chunk de taille:" << chunk.size() << "octets";
 */                tcpSocket->write(chunk);
                sendBuffer.remove(0, CHUNK_SIZE);
            } });

        qDebug() << "üé§ Streaming audio vers" << serverIp << ":" << serverPort;
    }
    else
    {

        qWarning() << "‚ö†Ô∏è Impossible de se connecter au serveur.";
    }
}

/*
 * Arr√™te la capture audio et ferme la connexion TCP.
 *
 * Cette m√©thode :
 *  - Stoppe la source audio pour interrompre la capture.
 *  - Ferme le socket TCP afin de lib√©rer la connexion r√©seau.
 */
void AudioClient::stopStreaming()
{
    audioSource->stop();
    tcpSocket->close();
    qDebug() << "‚èπÔ∏è Streaming audio arr√™t√©.";
}
